# ppgrep
#
#
function ppgrep() {
  if [[ $1 == "" ]]; then
    PERCOL=percol
  else
    PERCOL="percol --query $1"
  fi
  ps aux | eval $PERCOL | awk '{ print $2 }'
}

# ppkill
#
#
function ppkill() {
  if [[ $1 =~ "^-" ]]; then
    QUERY=""            # options only
  else
    QUERY=$1            # with a query
    [[ $# > 0 ]] && shift
  fi
  ppgrep $QUERY | xargs kill $*
}


# zsh history search
#
#
function exists { which $1 &> /dev/null }

if exists percol; then
    function percol_select_history() {
        local tac
        exists gtac && tac="gtac" || { exists tac && tac="tac" || { tac="tail -r" } }
        BUFFER=$(fc -l -n 1 | eval $tac | percol --query "$LBUFFER")
        CURSOR=$#BUFFER         # move cursor
        zle -R -c               # refresh
    }

    zle -N percol_select_history
    bindkey '^R' percol_select_history
fi


# pgb
#
# git branch name
#
function pgb () {
  if [[ $1 == "" ]]; then
    PERCOL=percol
  else
    PERCOL="percol --query $1"
  fi
  git for-each-ref --format='%(refname)' --sort=-committerdate refs/heads | \
      perl -pne 's{^refs/heads/}{}' | eval $PERCOL
}

# pgu
#
# git checkout to exist branch
#
function pgu () {
  if [[ $1 =~ "^-" ]]; then
    QUERY=""            # options only
  else
    QUERY=$1            # with a query
    [[ $# > 0 ]] && shift
  fi
  local selected_branch=$(pgb $QUERY)
  if [ -n "$selected_branch" ]; then
      git checkout ${selected_branch}
  fi
}

# pgo
#
# git checkout to fetched branch
#
function pgo () {
  if [[ $1 == "" ]]; then
    PERCOL=percol
  else
    PERCOL="percol --query $1"
  fi

  local selected_branch=$(git for-each-ref --format='%(refname)' --sort=-committerdate refs/heads refs/remotes | \
      perl -pne 's{^refs/(remotes)/}{}' | eval $PERCOL )
  if [ -n "$selected_branch" ]; then
      git checkout -t ${selected_branch}
  fi
}

# ec2-ip
#
# get ec2's ip
#
function ec2-ip() {
  if [[ $1 == "" ]]; then
    PERCOL=percol
  else
    PERCOL="percol --query $1"
  fi
  instances | eval $PERCOL | awk '{ print $2 }'
}

function instances() {
  instances=( $(aws ec2 describe-instances \
    --query 'Reservations[*].Instances[*].[Tags[?Key==`Name`].Value[],PublicIpAddress,PrivateIpAddress]' \
    --output text) )

  for i in `seq 1 ${#instances[@]}`; do
    # if [ `expr $i % 2` -eq 0 ]; then
    #   echo ${instances[$i]}
    # fi
    if [ `expr $i % 3` -eq 0 ]; then
      echo ${instances[$i-2]} ${instances[$i-2]} ${instances[$i]}
    fi
  done
}

# ec2-ssh
#
# ssh login to ec2 server
#
function ec2-ssh() {
  if [[ $1 =~ "^-" ]]; then
    QUERY=""            # options only
  else
    QUERY=$1            # with a query
    [[ $# > 0 ]] && shift
  fi
  ssh akiramiki@$(ec2-ip $QUERY) -p2222 -i ~/.ssh/id_rsa
}

# gcd
#
# change directory to ghq managed repository
#
function gcd() {
  if [[ $1 == "" ]]; then
    PERCOL=percol
  else
    PERCOL="percol --query $1"
  fi
  cd $(ghq list --full-path | eval $PERCOL)
}
